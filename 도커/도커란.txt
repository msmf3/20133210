도커란??
리눅스 버젼 컨테이너에서 시작함.

컨테이너 : 격리된 공간에서 프로세스가 동작하는 기술.
CPU의 가상화 기술을 이용해 전체 OS를 가상화하는 방식에서 탈피. VMware나 VirtualBox에 비해 가벼워짐.
추가적인 OS를 설치하여 가상화하는 방법은 성능적으로 문제가 있기 때문에 프로세스를 격리시키는 방식이 등장.
단순히 프로세스를 격리시키기 때문에 가볍고 빠르게 동작. 성능적인 손실이 거의 없음.
하나의 서버에 여러개의 컨테이너를 실행하면 서로 영향을 미치지 않고 독립적으로 실행되어 가벼운 가상머신을 사용하는 느낌을 줌.

도커에서 가장 중요한 개념은 이미지
이미지는 컨테이너 실행에 필요한 파일과 설정값 등을 포함하고 있음.
같은 이미지에서 여러 개의 컨테이너를 생성할 수 있고 컨테이너의 상태가 바뀌거나 컨테이너가 삭제되더라도 이미지는 변하지 않고 그대로 남아있음.

컨테이너, 오버레이 네트워크, 유니온 파일 시스템 등 이미 존재하는 기술을 도커처럼 잘 조합하고 사용하기 쉽게 만든 것이 없었고 사용자들이 원하는 기능을
간단하고 획기적으로 구현.

레이어 저장방식.
이미지는 컨테이너를 실행하기 위한 모든 정보를 가지고 있기 때문에 용량이 수백MB에 이름. 기존 이미지가 수정되면 다시 수백MB를 다운받는 건 비효율적임.
그래서 레이어라는 개념을 사용함. 유니온 파일 시스템을 이용하여 여러 개의 레이어를 하나의 파일시스템으로 사용할 수 있게 해줌.
이미지는 여러 개의 읽기 전용 레이어로 구성되고 파일이 추가되거나 수정되면 새로운 레이어가 생성됨.
영리한 설계임.

이미지 경로.
이미지는 url 방식으로 관리. 태그를 붙일 수 있음.


오버레이 네트워크 : 물리 네트워크 위에 성립된 가상의 네트워크 ex) P2P 네트워크
DevOps : 애플리케이션과 서비스를 빠른 속도로 제공할 수 있도록 조직의 역량을 향상시키는 문화 철학, 방식 및 도구의 조합. 
마이크로 서비스 아키텍처 : 하나의 큰 애플리케이션을 여러 개의 작은 애플리케이션으로 쪼개어 변경과 조합이 가능하도록 만든 구조.
                                 모놀리틱 아키텍처는 서비스가 지속적으로 성장하고 규모가 커질 대 한계에 부딪히게 됨. 그래서 발생한 개념.
클라우드 서버 : 호스팅 업체의 가상 서버를 단독으로 사용.
                    사용자가 필요할 때 자유롭게 서버 확장/축소 가능. 이용한 만큼만 과금함. 경제적임.